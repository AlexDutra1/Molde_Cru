UNIDIRECIONAL

@OneToOne

Exemplo: Um Customer (cliente) tem um User (usuário). Onde um Customer
pode ter apenas um User e vice-versa, um simples um para um.

Mapeamento: (Forma Unidirecional)
@OneToOne(cascade = CascadeType.ALL, optional = false, fetch = FetchType.EAGER, orphanRemoval = true)
// @JoinColumn(name="USER_ID", nullable=false)
@PrimaryKeyJoinColumn
private User user;

Propriedades Usadas:
cascade  				– define ações automatizadas no relacionamento, ex.: Ao apagar um Customer, apagar também um Usuário. 
optional 				– você não será obrigado a ter um User ao persistir um Customer,(você poderá buscar o Customer no banco de dados, mas Customer.getUser() terá null como resposta). Com o valor igual a false, ao se cadastrar um Customer, é obrigatória a presença de um User. 
fetch 	 				– o valor padrão é EAGER. Ao carregar o Customer já será feita a consulta relacionada ao User de modo automático.
orphanRemoval”  		– define que uma entidade dependente, caso não tenha relacionamento, será removida do banco de dados. Caso exista um User sem Customer, esse user será removido.
@PrimaryKeyJoinColumn 	– essa anotação indica ao JPA que, para encontrar um objeto User basta procurar um registro com o mesmo ID do Customer.
Ou seja, indica que um User vai ter o mesmo ID que seu Customer.

Propriedades Usadas do Comentado:

@JoinColumn(name=”USER_ID”, nullable=false) 
Define qual é a coluna mapeada para fazer a união na consulta. É indicado o nome da coluna através do parâmetro “name” e que esse campo não pode ser nulo pelo parâmetro “nullable”.





=====================
BIDIRECIONAL